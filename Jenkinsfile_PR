#!/usr/bin/env groovy
@Library(['piper-lib', 'piper-lib-os']) _

node('master') {
	dockerExecuteOnKubernetes(script: this, dockerEnvVars: ['pusername':pusername, 'puserpwd':puserpwd], dockerImage: 'refapps.int.repositories.cloud.sap/sfext:v3' ) {

      try {	
	
		stage('Build') { 
			deleteDir()
      		checkout scm	 
	 		sh '''
				npm config set unsafe-perm true
			    npm rm -g @sap/cds
			    npm i -g @sap/cds-dk
			    
                mv mta.yaml mta_Prod.yaml
                mv mta_Test.yaml mta.yaml
			'''
			packageJson = readJSON file: 'package.json'
			packageJson.cds.requires.API_BUSINESS_PARTNER["[production]"].credentials.destination = "bupa-ecc-mock"
			writeJSON file: 'package.json', json: packageJson
			
            sh '''
			   cat package.json
			   mv ./build/xs-security.json xs-security.json
			   mbt build -p=cf
			''' 
		 
	  	}

	  	stage('Deploy validation app and mock') {
			setupCommonPipelineEnvironment script:this
			cloudFoundryDeploy script:this, deployTool:'mtaDeployPlugin'
        }

        stage('Prepare for test') {
            withCredentials([usernamePassword(credentialsId: 'pusercf', passwordVariable: 'pass', usernameVariable: 'user')]) {
                sh "cf login -a ${commonPipelineEnvironment.configuration.steps.cloudFoundryDeploy.cloudFoundry.apiEndpoint} -u $user -p $pass -o ${commonPipelineEnvironment.configuration.steps.cloudFoundryDeploy.cloudFoundry.org} -s ${commonPipelineEnvironment.configuration.steps.cloudFoundryDeploy.cloudFoundry.space}"
            }

            try{
                    sh '''
                        mockServerId=`cf app mock-srv --guid`
                        cf curl /v2/apps/$mockServerId/env > tests/util/mock-srv-env.json

                        bpAppId=`cf app BusinessPartnerValidation-srv --guid`
                        cf curl /v2/apps/$bpAppId/env > tests/util/bp-app-env.json
                    '''

					stash name: 'env_vars', includes: 'tests/util/*.json'
            }
                        
            catch(err){
                    echo "caught: ${err}"
            }
        }

		stage('Rest API Test') {
				sh '''
					npm install --only=dev
				    npm run-script test:rest-api
				'''
		}

		// stage('Integration Test') {
		// 	sh '''
		// 		npm run test
		// 	'''
		// }

		stage('WDI5 tests') {

			dockerExecuteOnKubernetes(script: this, dockerImage: 'refapps.int.repositories.cloud.sap/wdi5_tests:latest' ) {
				checkout scm
				unstash name: 'env_vars'

				withCredentials([usernamePassword(credentialsId: 'pusercf', passwordVariable: 'wdi5_password', usernameVariable: 'wdi5_username')]) {
					sh'''
						npm i
						cd app/BusinessPartners
						npm i
						npm run wdi5
					''' 
				}
			}
		}
		
	    
	    stage('Redeploy') {
		   	sh "rm -rf *"
      		checkout scm
		   	sh '''
			    mv ./build/xs-security.json xs-security.json
			    mbt build -p=cf
			'''
			cloudFoundryDeploy script:this, deployTool:'mtaDeployPlugin'  
	    } 
		
		
		stage('UI Test') {
		   
			build job: 'ECCExtensionDemoscript'
		
		}
		
		stage('Undeploy') {
			sh''' 
		   		echo 'y' | cf undeploy BusinessPartnerValidation
		   	'''
	    }
	      
      }
        
      catch(e){
            echo 'This will run only if failed'
            currentBuild.result = "FAILURE"
      }
        
      finally {
            emailext body: '$DEFAULT_CONTENT', subject: '$DEFAULT_SUBJECT', to: 'DL_5731D8E45F99B75FC100004A@global.corp.sap,DL_58CB9B1A5F99B78BCC00001A@global.corp.sap'
      }
            
    }	
} 
